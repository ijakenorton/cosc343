import numpy as np
import matplotlib.pyplot as plt

# Function to compute moving average
def moving_average(data_set, periods=3):
    weights = np.ones(periods) / periods
    return np.convolve(data_set, weights, mode='valid')

# Your average fitness values
numbers = "1.675 3.425 3.225 4.9 4.6 5.1 5.825 5.9 6.75 7.15 6.0 7.025 5.825 5.925 5.225 6.275 5.25 5.875 5.8 5.55 5.65 6.3 7.85 6.825 7.55 6.65 5.45 7.075 5.875 6.55 6.125 6.8 6.025 7.075 6.925 6.175 7.05 7.775 7.55 7.375 7.025 6.925 7.575 7.25 6.675 6.875 7.55 7.05 5.8 7.8 6.25 7.225 7.2 6.45 7.625 7.3 6.375 5.525 7.175 5.275 7.175 7.45 6.25 6.375 6.15 6.65 7.3 6.625 8.15 7.4 6.9 6.675 7.15 7.625 6.15 7.375 6.6 7.075 6.15 5.15 6.525 6.6 7.3 6.375 6.775 7.125 7.275 6.175 7.325 6.85 7.325 7.275 6.875 7.2 7.075 6.575 7.15 7.075 7.0 7.75 7.025 7.975 6.975 7.425 7.65 7.55 6.175 7.925 7.125 7.1 8.575 7.0 6.15 8.5 7.475 7.225 6.475 6.65 6.7 6.45 6.875 5.65 7.2 6.9 6.725 6.65 6.65 7.775 6.0 7.0 6.975 6.15 6.45 6.9 6.85 6.725 7.15 7.9 7.575 7.275 6.4 7.675 7.6 5.95 7.8 7.2 6.9 7.575 6.55 7.075 7.325 7.75 7.025 8.25 7.75 7.375 7.425 7.55 6.9 7.45 7.1 7.725 7.9 8.325 6.825 6.9 7.675 8.025 7.4 7.1 7.65 7.05 7.225 7.4 6.85 6.25 7.5 7.75 8.425 7.525 7.4 6.7 7.6 8.3 8.1 6.5 6.725 6.9 8.05 8.25 6.8 8.65 7.05 7.5 6.95 7.4 7.2 7.125 7.375 8.15 7.075 7.375 7.425 7.425 7.7 7.875 8.45 7.0 8.3 8.025 7.15 7.325 8.175 6.35 7.575 7.1 8.05 7.825 7.25 6.9 7.775 7.275 7.1 7.275 7.0 7.775 7.375 7.325 7.475 6.95 6.575 7.775 7.225 7.4 7.3 8.2 6.825 6.825 7.675 7.8 7.275 8.575 8.6 6.525 7.7 6.025 6.9 7.2 7.225 6.8 6.6 5.85 7.875 6.525 7.85 7.45 7.3 6.825 7.375 7.325 7.55 7.125 6.8 8.45 8.45 6.275 7.8 8.025 6.975 7.8 8.175 7.45 7.25 8.575 7.725 8.25 7.825 7.975 7.425 7.25 7.475 7.5 7.575 7.575 6.35 5.75 7.225 6.175 6.95 6.35 6.875 6.425 6.95 6.325 5.425 7.575 5.175 7.325 6.525 6.175 6.8 7.025 7.425 6.025 7.625 6.325 8.725 6.35 6.725 7.725 6.75 7.6 7.35 6.55 8.675 5.875 7.25 6.525 7.425 6.875 7.3 7.375 8.1 6.75 6.875 6.875 6.5 7.2 6.45 5.825 7.25 7.225 6.325 6.8 7.35 7.125 7.6 6.975 6.0 6.05 7.025 7.075 7.4 7.425 6.9 7.2 7.05 7.025 8.75 7.25 7.625 7.75 6.425 7.325 7.75 7.25 7.2 7.2 7.05 7.1 7.5 7.425 7.65 7.0 7.875 7.525 6.775 5.75 7.925 7.75 6.875 7.05 7.675 8.35 6.275 8.625 6.75 7.925 7.425 7.45 7.45 8.175 7.275 8.85 7.675 6.625 7.05 7.625 7.925 6.925 7.775 7.525 6.775 8.0 7.225 7.375 7.15 6.95 6.275 7.65 8.05 6.825 8.7 6.7 7.85 6.95 7.15 7.825 6.3 7.55 8.35 7.1 6.8 7.35 8.25 8.5 7.3 8.625 7.775 8.175 6.625 7.0 6.5 7.925 8.025 7.725 6.875 5.45 7.175 6.075 6.425 6.85 7.625 6.625 7.45 6.575 7.65 7.825 7.925 7.55 7.3 6.475 7.775 7.675 8.075 7.275 7.025 8.4 7.125 8.225 7.7 7.175 6.85 7.425 7.925 5.925 7.175 6.85 6.55 7.1 7.9 7.775 7.125 6.825 7.6 7.125 7.625 7.575 7.725 6.35 8.9 7.425 7.375 6.25 8.2 7.925 7.45 7.275 7.925 7.325 7.0 7.275 7.375 7.275 7.225 7.9 7.475 7.425 7.9 7.075 7.975 6.75 6.25 7.475 7.6 7.1 7.575 6.325 8.6"
# Extracting values from the numbers string
fitnesses = [float(number.strip()) for number in numbers.split()]

# Calculate the moving average
smoothed_fitnesses = moving_average(fitnesses, periods=10)  # adjust the period based on desired smoothness

# Create a list of epochs/timesteps based on the length of fitness values
epochs = list(range(1, len(fitnesses)+1))

# Create an adjusted epoch list for the smoothed data
smoothed_epochs = epochs[:len(smoothed_fitnesses)]

# Plotting
plt.figure(figsize=(12, 6))
plt.plot(epochs, fitnesses, label='Average Fitness', color='blue', alpha=0.3)
plt.plot(smoothed_epochs, smoothed_fitnesses, label='Trend (Moving Average)', color='red', linewidth=2)

plt.title('Model Average Fitness Over Time')
plt.xlabel('Epoch')
plt.ylabel('Average Fitness')
plt.legend()
plt.grid(True)
plt.tight_layout()

# Display the plot
plt.show()
